package es.fdi.iw.controller;

import java.util.List;
import java.util.Locale;
import java.util.UUID;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import es.fdi.iw.model.Bestia;
import es.fdi.iw.model.Heroe;
import es.fdi.iw.model.Item;
import es.fdi.iw.model.TipoItem;
import es.fdi.iw.model.User;


/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {


	@PersistenceContext
	private EntityManager entityManager;

	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		/*logger.info("Welcome home! The client locale is {}.", locale);

		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);

		String formattedDate = dateFormat.format(date);

		model.addAttribute("serverTime", formattedDate );*/

		return "login";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/perfil", method = RequestMethod.GET)
	public String perfil(Locale locale, Model model , HttpSession session) {
		String formSource = "perfil";
		User u = (User)session.getAttribute("user");
		if(u == null) formSource = "login";
		return formSource;
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/arcade", method = RequestMethod.GET)
	public String arcade(Locale locale, Model model) {
		return "arcade";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/arena", method = RequestMethod.GET)
	public String arena(Locale locale, Model model) {
		return "combates";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login(Locale locale, Model model) {

		return "login";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/armeria", method = RequestMethod.GET)
	public String armeria(Locale locale, Model model) {
		return "armeria";
	}


	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/lobby", method = RequestMethod.GET)
	public String lobby(Locale locale, Model model) {
		return "lobby";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/registrar", method = RequestMethod.GET)
	public String registrar(Locale locale, Model model) {
		return "registrar";
	}

	/**
	 * Intercepts login requests generated by the header; then continues to load normal page
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@Transactional
	public String login(
			@RequestParam("login") String formLogin,
			@RequestParam("password") String formPass,
			HttpServletRequest request, HttpServletResponse response, 
			Model model, HttpSession session) {


		String formSource = "login";
		logger.info("Login attempt from '{}' while visiting '{}'", formLogin);

		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null || formPass.length() < 4) {
			model.addAttribute("loginError", "usuarios y contraseñas: 4 caracteres mínimo");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		} else {
			User u = null;
			try {
				u = (User)entityManager.createNamedQuery("userByLogin")
						.setParameter("loginParam", formLogin).getSingleResult();
				if (u.isPassValid(formPass)) {
					logger.info("pass was valid");				
					session.setAttribute("user", u);
					formSource = "perfil";
					// sets the anti-csrf token
					getTokenForSession(session);
				} else {
					logger.info("pass was NOT valid");
					model.addAttribute("loginError", "error en usuario o contraseña");
					response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
				}
			} catch (NoResultException nre) {
				if (formPass.length() == 4) {
					// UGLY: register new users if they do not exist and pass is 4 chars long
					logger.info("no-such-user; creating user {}", formLogin);				
					User user = User.createUser(formLogin, formPass, "user", "Hola");
					entityManager.persist(user.getHeroe());
					entityManager.persist(user);	
					//session.setAttribute("heroe", user.getHeroe());
					session.setAttribute("user", user);
					// sets the anti-csrf token
					getTokenForSession(session);					
				} else {
					logger.info("no such login: {}", formLogin);
				}
				model.addAttribute("loginError", "error en usuario o contraseña");
			}
		}

		// redirects to view from which login was requested
		return formSource;
	}

	/**
	 * Intercepts login requests generated by the header; then continues to load normal page
	 */
	@RequestMapping(value = "/registro", method = RequestMethod.POST)
	@Transactional
	public String registro(
			@RequestParam("correo") String formLogin,
			@RequestParam("nombre") String formNombre,
			@RequestParam("password") String formPass,
			@RequestParam("repassword") String formRePass,

			HttpServletRequest request, HttpServletResponse response, 
			Model model, HttpSession session) {

		logger.info("Login attempt from '{}' while visiting '{}'", formLogin);
		String formSource = "registrar";
		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null || formPass.length() < 4) {
			model.addAttribute("registrerError", "usuarios y contraseñas: 4 caracteres mínimo");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		} else {
			User user = User.createUser(formLogin, formPass, "user", formNombre);
			User u = null;
			try{
				u = (User)entityManager.createNamedQuery("userByLogin")
						.setParameter("loginParam", formLogin).getSingleResult();
				if (u != null) {
					model.addAttribute("registrerError", "ya estas registrado");
				} else {
					if(formPass.equals(formRePass)){
						entityManager.persist(user.getHeroe());
						entityManager.persist(user);				
						session.setAttribute("user", user);
						formSource = "perfil";
					} else {
						model.addAttribute("registrerError", "la contraseña no es la misma en los dos campos");
						formSource = "registrar";
					}
				}
			}catch(NoResultException nre){
				if(formPass.equals(formRePass)){
					entityManager.persist(user.getHeroe());
					entityManager.persist(user);				
					session.setAttribute("user", user);
					formSource = "perfil";
				} else {
					formSource = "registrar";
				}
			}
		}

		// redirects to view from which login was requested
		return formSource;
	}


	/**
	 * Returns an anti-csrf token for a session, and stores it in the session
	 * @param session
	 * @return
	 */
	static String getTokenForSession (HttpSession session) {
		String token=UUID.randomUUID().toString();
		session.setAttribute("csrf_token", token);
		return token;
	}

	/**
	 * Logout (also returns to home view).
	 */
	@RequestMapping(value = "/logout", 
			method = RequestMethod.GET)
	public String logout(HttpSession session) {
		logger.info("User '{}' logged out", 
				session.getAttribute("user"));
		session.invalidate();
		return "redirect:/";
	}


	/*
	 ********************* FUNCIONES DE LA GESTION *****************************
	 */

	/************************ GESTION DE USUARIOS *********************************/

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/gestionUsuarios", method = RequestMethod.GET)
	public String gestionUsuarios(Locale locale, Model model) {
		List<User> u = null;
		try{
			u = (List<User>)entityManager.createNamedQuery("allUsers").getResultList();
			model.addAttribute("users", u);
		} catch(NoResultException nre){}
		return "gestionUsuarios";
	}

	@RequestMapping(value = "/gestionUsuarios", method = RequestMethod.POST)
	@Transactional
	public String modificarEstadoUsers(Model model) {
		return "gestionUsuarios";
	}

	/*******************************************************************************/

	/**************************** GESTION OBJETOS *********************************/
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/gestionObjetos", method = RequestMethod.GET)
	public String gestionObjetos(Model model) {
		List<Item> o = null;
		try{
			o = (List<Item>)entityManager.createNamedQuery("allItems").getResultList();
			model.addAttribute("objetos", o);
		} catch(NoResultException nre){}
		return "gestionObjetos";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/nuevoObjeto", method = RequestMethod.GET)
	public String nuevoObjeto(Model model) {
		return "nuevoObjeto";
	}
	
	@Transactional
	@RequestMapping(value = "/registrarItem", method = RequestMethod.POST)
	public String registrarItem(
			@RequestParam("nombreObj") String formNombre,
			@RequestParam("tipoObj") TipoItem formTipo,
			@RequestParam("nivelObj") int formNivel,
			@RequestParam("vidaObj") int formVida,
			@RequestParam("fuerzaObj") int formFuerza,
			@RequestParam("precisionObj") int formPrecision,
			@RequestParam("defObj") int formDefensa,
			@RequestParam("velObj") int formVelocidad,
			@RequestParam("precioObj") int formPrecio,
			Model model) {
			//TipoItem tipo = TipoItem.parseo(formTipo);
			String formSource = "nuevoObjeto";
			// validate request
			if (formNombre == null) {
				model.addAttribute("objetoError", "Debe asignar un nombre");
			} else {
				Item item = new Item(formNombre, " ", formVida,formFuerza, formDefensa,
						formVelocidad, formPrecision, formTipo , formPrecio);
				Item i = null;
				try{
					i = (Item)entityManager.createNamedQuery("itemByName")
							.setParameter("nombreParam", formNombre).getSingleResult();
					if (i != null) {
						model.addAttribute("objetoError", "el nombre ya esta en uso");
					} else {
						entityManager.persist(item);
						formSource = gestionObjetos(model);
					}
				} catch(NoResultException nre){
						entityManager.persist(item);				
						formSource = gestionObjetos(model);
				}
			}
			return formSource;
		}

	/*******************************************************************************/

	/**************************** GESTION DE BESTIAS ******************************/
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/gestionBestias", method = RequestMethod.GET)
	public String gestionBestias(Model model) {
		List<Bestia> b = null;
		try{
			b = (List<Bestia>)entityManager.createNamedQuery("allBestias").getResultList();
			model.addAttribute("bestias", b);
		} catch(NoResultException nre){}
		return "gestionBestias";
	}
	
	@RequestMapping(value = "/nuevaBestia", method = RequestMethod.GET)
	public String nuevaBestia(Model model) {
		return "nuevaBestia";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@Transactional
	@RequestMapping(value = "/registrarBestia", method = RequestMethod.POST)
	public String registrarBestia(
			@RequestParam("nombreBestia") String formNombre,
			@RequestParam("nivel") int formNivel,
			@RequestParam("vida") int formVida,
			@RequestParam("fuerza") int formFuerza,
			@RequestParam("precision") int formPrecision,
			@RequestParam("defensa") int formDefensa,
			@RequestParam("velocidad") int formVelocidad,
			@RequestParam("exp") int formExp,
			@RequestParam("oro") int formOro,
			Model model) {
		
			String formSource = "nuevaBestia";
			// validate request
			if (formNombre == null) {
				model.addAttribute("bestiaError", "Debe asignar un nombre");
			} else {
				Bestia bestia = new Bestia(formFuerza, formDefensa, formVida, formPrecision
						,formVelocidad, formNivel, formNombre, formExp, formOro);
				Bestia b = null;
				try{
					b = (Bestia)entityManager.createNamedQuery("bestiaByName")
							.setParameter("nombreParam", formNombre).getSingleResult();
					if (b != null) {
						model.addAttribute("bestiaError", "el nombre ya esta en uso");
					} else {
						entityManager.persist(bestia);
						formSource = gestionBestias(model);
					}
				} catch(NoResultException nre){
						entityManager.persist(bestia);				
						formSource = gestionBestias(model);
				}
			}
			return formSource;
		}
	
	
/******************************************************************************/
}
