package es.fdi.iw.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.UUID;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.transaction.Transactional;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.Gson;

import es.fdi.iw.ContextInitializer;
import es.fdi.iw.model.Ataque;
import es.fdi.iw.model.Bestia;
import es.fdi.iw.model.Combate;
import es.fdi.iw.model.CombateBestia;
import es.fdi.iw.model.Heroe;
import es.fdi.iw.model.Item;
import es.fdi.iw.model.TipoItem;
import es.fdi.iw.model.User;


/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {


	@PersistenceContext
	private EntityManager entityManager;

	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);


	/**************************** LOGIN Y REGISTRO ******************************/

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Model model) {
		return "login";
	}

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login(Model model) {
		return "login";
	}

	/** Intercepts login requests generated by the header; then continues to load normal page
	 **/
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@Transactional
	public String login(
			@RequestParam("login") String formLogin,
			@RequestParam("password") String formPass,
			HttpServletRequest request, HttpServletResponse response, 
			Model model, HttpSession session) {


		String formSource = "login";
		logger.info("Login attempt from '{}' while visiting '{}'", formLogin);

		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null || formPass.length() < 4) {
			model.addAttribute("loginError", "usuarios y contraseñas: 4 caracteres mínimo");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		} else {
			User u = null;
			try {
				u = (User)entityManager.createNamedQuery("userByLogin")
						.setParameter("loginParam", formLogin).getSingleResult();
				if (u.isPassValid(formPass)) {
					if (!u.isBanned()) {
						// sets the anti-csrf token
						getTokenForSession(session);
						logger.info("pass was valid");				
						session.setAttribute("user", u);
						if(u.getRole().equals("user"))
							formSource = "redirect:perfil";
						else if(u.getRole().equals("admin")){
							return "redirect:" + gestionUsuarios(model, session);
						}
					} else {
						logger.info("you are banned");
						model.addAttribute("loginError", "Su cuenta esta baneada");
						response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
					}
				} else {
					logger.info("pass was NOT valid");
					model.addAttribute("loginError", "error en usuario o contraseña");
					response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
				}
			} catch (NoResultException nre) {
				logger.info("no such login: {}", formLogin);
				model.addAttribute("loginError", "error en usuario o contraseña");
			}
		}

		// redirects to view from which login was requested
		return formSource;
	}

	@RequestMapping(value = "/registrar", method = RequestMethod.GET)
	public String registrar(Model model) {
		return "registrar";
	}

	/**
	 * Intercepts login requests generated by the header; then continues to load normal page
	 */
	@RequestMapping(value = "/registro", method = RequestMethod.POST)
	@Transactional
	public String registro(
			@RequestParam("correo") String formLogin,
			@RequestParam("nombre") String formNombre,
			@RequestParam("password") String formPass,
			@RequestParam("repassword") String formRePass,
			@RequestParam("imagen") String formImagen,

			HttpServletRequest request, HttpServletResponse response, 
			Model model, HttpSession session) {

		logger.info("Login attempt from '{}' while visiting '{}'", formLogin);

		//Comprobamos los datos introducidos
		if (formLogin == null || formLogin.length() < 4 ||
				formNombre == null || formNombre.length() < 4 ||
				formPass == null || formPass.length() < 4) {
			model.addAttribute("registrerError", "Usuarios y contraseñas: 4 caracteres mínimo.");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			return "registrar";
		}

		//Comprobamos que su correo este disponible
		User u = null;
		try{
			u = (User)entityManager.createNamedQuery("userByLogin")
					.setParameter("loginParam", formLogin).getSingleResult();
			if (u != null) {
				model.addAttribute("registrerError", "¡Su correo ya esta siendo usado!");
				return "registrar";
			}
		}catch (NoResultException nre) {}

		//Comprobamos que el nombre de heroe no este usado
		Heroe h = null;
		try {
			h = (Heroe)entityManager.createNamedQuery("buscarHeroe")
					.setParameter("nombreParam", formNombre).getSingleResult();
			if (h != null) {
				model.addAttribute("registrerError", "¡Ese heroe ya existe!");
				return "registrar";
			}
		} catch (NoResultException nre) {}


		User user = User.createUser(formLogin, formPass, "user", formNombre);

		if(formPass.equals(formRePass)){
			user.getHeroe().setImagen(formImagen);
			entityManager.persist(user.getHeroe());
			entityManager.persist(user);	
			session.setAttribute("user", user);
			return "redirect:perfil";
		}

		model.addAttribute("registrerError", "¡La contraseña no es la misma en los dos campos!");
		return "registrar";
	}

	/**
	 * Logout (also returns to home view).
	 */
	@RequestMapping(value = "/logout", 
			method = RequestMethod.GET)
	public String logout(HttpSession session) {
		logger.info("User '{}' logged out", 
				session.getAttribute("user"));
		session.invalidate();
		return "redirect:/";
	}



	/****************************************************************************/


	/**************************** ACERCA DE ****************************************/
	@RequestMapping(value = "/acercaDe", method = RequestMethod.GET)
	public String acercaDe(){
		return "acercaDe";
	}

	/****************************************************************************/


	/**************************** PERFIL ****************************************/

	@RequestMapping(value = "/perfil", method = RequestMethod.GET)
	public String perfil(Model model , HttpSession session) {
		User u = (User)session.getAttribute("user");
		if(u == null) return "login";
		else {
			model.addAttribute("constantesHeroe", Heroe.getJsonConstants());
			return "perfil";
		}
	}



	@Transactional
	@RequestMapping(value = "/equiparObjeto", method = RequestMethod.POST)
	public String equiparObjeto(
			@RequestParam("idObjeto") long id,
			Model model, HttpSession session) {

		try{
			Item i = (Item)entityManager.find(Item.class, id);
			User u = (User)session.getAttribute("user");
			User us = (User)entityManager.find(User.class, u.getId());
			us.getHeroe().equiparItem(i);
			session.setAttribute("user", us);
		} catch(NoResultException nre){}
		//DUDA: ES NECESARIO LLAMAR A PERFIL () O  VALDRIA PERFIL
		return "redirect:perfil";
	}

	@Transactional
	@RequestMapping(value = "/desequiparObjeto", method = RequestMethod.POST)
	public String desequiparObjeto(
			@RequestParam("idObjeto") long id,
			Model model, HttpSession session) {

		try{
			Item i = (Item)entityManager.find(Item.class, id);
			User u = (User)session.getAttribute("user");
			User us = (User)entityManager.find(User.class, u.getId());
			us.getHeroe().desequiparItem(i);
			session.setAttribute("user", us);
		} catch(NoResultException nre){}
		//DUDA: ES NECESARIO LLAMAR A PERFIL () O  VALDRIA PERFIL
		return "redirect:perfil";
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/subirStats", method = RequestMethod.POST)
	public ResponseEntity<String> subirStats(
			@RequestParam("subir") String stat,
			HttpSession session,
			Model model) {

		boolean modificado = false;

		User u = (User)session.getAttribute("user");
		if (u == null) return new ResponseEntity<String>("Error", HttpStatus.BAD_REQUEST);

		User us = (User)entityManager.find(User.class, u.getId());
		Heroe h = us.getHeroe();

		if (h.getPuntosHab() > 0) {
			if (stat.equals("subirVida") && (h.getVida() < Heroe.MAX_VIDA)) {
				double vida = h.getVida() + Heroe.VIDA_POR_PUNTO;
				h.setVida(vida);
				modificado = true;
			} else if (stat.equals("subirFue") && (h.getFuerza() < Heroe.MAX_FUERZA)) {
				int fuerza = h.getFuerza() + Heroe.FUE_POR_PUNTO;
				h.setFuerza(fuerza);
				modificado = true;
			} else if (stat.equals("subirPrec") && (h.getPrecision() < Heroe.MAX_PRECISION)) {
				int precision = h.getPrecision() + Heroe.PREC_POR_PUNTO;
				h.setPrecision(precision);
				modificado = true;
			} else if (stat.equals("subirDef") && (h.getDefensa() < Heroe.MAX_DEFENSA)) {
				int defensa = h.getDefensa() + Heroe.DEF_POR_PUNTO;
				h.setDefensa(defensa);
				modificado = true;
			} else if (h.getVelocidad() < Heroe.MAX_VELOCIDAD){
				int velocidad = h.getVelocidad() + Heroe.VEL_POR_PUNTO;
				h.setVelocidad(velocidad);
				modificado = true;
			}
			if (modificado) {
				h.setPuntosHab(h.getPuntosHab() - 1);
				session.setAttribute("user", us);
			}
		}
		StringBuilder sb = new StringBuilder("");
		sb.append("{"
				+ "\"vida\": \"" + h.getVida() + "\", "
				+ "\"fuerza\": \"" + h.getFuerza() + "\", "
				+ "\"precision\": \"" + h.getPrecision() + "\", "
				+ "\"defensa\": \"" + h.getDefensa() + "\", "
				+ "\"velocidad\": \"" + h.getVelocidad() + "\", "
				+ "\"puntosHab\": \"" + h.getPuntosHab() + "\"}");

		model.addAttribute("constantesHeroe", Heroe.getJsonConstants());

		return new ResponseEntity<String>(sb + "", HttpStatus.OK);
	}

	/***************************************************************************/


	/*************************** ARMERIA ***************************************/

	@RequestMapping(value = "/armeria", method = RequestMethod.GET)
	public String armeria(Model model , HttpSession session) {
		String formSource = "armeria";
		User u = (User)session.getAttribute("user");
		if(u == null) formSource = "login";
		List<Item> i = null;
		try{
			i = (List<Item>)entityManager.createNamedQuery("itemsPorNivel").getResultList();
			model.addAttribute("items", i);
		} catch(NoResultException nre){}
		return formSource;
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/comprarAjax", method = RequestMethod.POST)
	public ResponseEntity<String> comprarAjax(
			@RequestParam("idObjeto") String _id,
			@RequestParam("idUser") String _idUs,Model model,HttpSession session) {
		StringBuilder sb = new StringBuilder("[");
		StringBuilder error = new StringBuilder("");
		long id = Long.parseLong(_id);
		long idUs = Long.parseLong(_idUs);
		try{
			Item i = (Item)entityManager.getReference(Item.class, id);
			User us = (User)entityManager.find(User.class, idUs);
			try {
				us.getHeroe().comprarObjeto(i);
				for(Item a: us.getHeroe().getInventario()){
					if (sb.length()>1) sb.append(",");
					sb.append("{"
							+ "\"fuerza\": \"" + a.getFuerza() + "\", "
							+ "\"defensa\": \"" + a.getDefensa() + "\", "
							+ "\"velocidad\": \"" + a.getVelocidad() + "\", "
							+ "\"precision\": \"" + a.getPrecision() + "\", "
							+ "\"nivel\": \"" + a.getNivel() + "\", "
							+ "\"vida\": \"" + a.getVida() + "\", "
							+ "\"precio\": \"" + a.getPrecio() + "\", "
							+ "\"tipo\": \"" + a.getTipo().getNombreTipo() + "\", "
							+ "\"nombre\": \"" + a.getNombre() + "\", "
							+ "\"id\": \"" + a.getId() + "\"}");
				}
				sb.append("]");
				session.setAttribute("user", us);
			} catch(Exception e) {
				logger.info("error en comprar", e.getMessage());
				error.append("{"
						+ "\"message\": \"" + e.getMessage() + "\"}");
				return new ResponseEntity<String>(error + "", HttpStatus.BAD_REQUEST);
			}
			logger.info("Devolviendo " + sb);
			System.err.println(sb);
			return new ResponseEntity<String>(sb + "", HttpStatus.OK);
		} catch(NoResultException nre){
			logger.info("error en comprar", nre);
			return new ResponseEntity<String>(nre.getMessage(), HttpStatus.BAD_REQUEST);
		}	
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/venderObjeto", method = RequestMethod.POST)
	public ResponseEntity<String> venderObjeto(
			@RequestParam("idObjeto") long id,
			Model model, HttpSession session) {
		StringBuilder sb = new StringBuilder("[");
		try{
			Item i = (Item)entityManager.find(Item.class, id);
			User u = (User)session.getAttribute("user");
			User us = (User)entityManager.find(User.class, u.getId());
			us.getHeroe().venderObjeto(i);
			for(Item a: us.getHeroe().getInventario()){
				if (sb.length()>1) sb.append(",");
				sb.append("{"
						+ "\"fuerza\": \"" + a.getFuerza() + "\", "
						+ "\"defensa\": \"" + a.getDefensa() + "\", "
						+ "\"velocidad\": \"" + a.getVelocidad() + "\", "
						+ "\"precision\": \"" + a.getPrecision() + "\", "
						+ "\"nivel\": \"" + a.getNivel() + "\", "
						+ "\"vida\": \"" + a.getVida() + "\", "
						+ "\"precio\": \"" + a.getPrecio() + "\", "
						+ "\"tipo\": \"" + a.getTipo().getNombreTipo() + "\", "
						+ "\"nombre\": \"" + a.getNombre() + "\", "
						+ "\"id\": \"" + a.getId() + "\"}");
			}
			sb.append("]");
			session.setAttribute("user", us);
		} catch(NoResultException nre){}
		return new ResponseEntity<String>(sb + "", HttpStatus.OK);
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/actualizaDinero", method = RequestMethod.POST)
	public ResponseEntity<String> actualizaDinero(
			Model model, HttpSession session) {
		StringBuilder sb = new StringBuilder("");
		try{
			User u = (User)session.getAttribute("user");
			User us = (User)entityManager.find(User.class, u.getId());
			sb.append("{"
					+ "\"dinero\": \"" + us.getHeroe().getOro() + "\"}");
			System.err.println(sb + "");
		} catch(NoResultException nre){
			logger.info("error en comprar", nre);
			return new ResponseEntity<String>(nre.getMessage(), HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity<String>(sb + "", HttpStatus.OK);
	}

	/********************** FUNCIONES DE COMBATES ************************************/

	@RequestMapping(value = "/combate", method = RequestMethod.GET)
	public String combate(Heroe rival, Model model , HttpSession session, Combate c) {
		String formSource = "combate";
		User u = (User)session.getAttribute("user");
		if(u == null) formSource = "login";
		model.addAttribute("rival", rival);
		session.setAttribute("combate", c);
		Gson g= new Gson();
		try {
			model.addAttribute("combate", g.toJson(c));
		} catch (Exception e) {
			formSource="perfil";
			e.printStackTrace();
		}
		return formSource;
	}

	/****************************** ARENA **************************************/

	@RequestMapping(value = "/arena", method = RequestMethod.GET)
	public String arena(Bestia b, Model model, HttpSession session, CombateBestia c) {
		String formSource = "combateBestia";
		User u = (User)session.getAttribute("user");
		if(u == null) formSource = "login";
		model.addAttribute("rival", b);
		session.setAttribute("combate", c);
		Gson g = new Gson();
		try {
			model.addAttribute("combate", g.toJson(c));
		} catch (Exception e) {
			formSource="perfil";
			e.printStackTrace();
		}		
		return formSource;
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/lobby", method = RequestMethod.GET)
	public String lobby(Model model , HttpSession session) {
		String formSource = "lobby";
		List<Heroe> t = null;		
		User u = (User)session.getAttribute("user");
		if(u == null) formSource = "login";
		try{
			t = (List<Heroe>)entityManager.createNamedQuery("topDiez").setMaxResults(10).getResultList();
			model.addAttribute("heroes", t);
		} catch(NoResultException nre){}
		return formSource;
	}

	@Transactional
	@RequestMapping(value = "/buscarAmigo", method = RequestMethod.POST)
	public String buscarAmigo(
			@RequestParam("busqueda") String amigo,
			Model model, HttpSession session) {

		String formSource = "";
		Heroe rival = null;
		boolean fallo = true;
		Exception e;

		try{
			User yo = (User)session.getAttribute("user");
			if(!amigo.equals(yo.getHeroe().getNombre())){
				rival = (Heroe)entityManager.createNamedQuery("buscarHeroe").setParameter("nombreParam", amigo).getSingleResult();
				model.addAttribute("rival", rival);
				Combate c = (Combate) new Combate(yo.getHeroe(), rival);
				formSource=combate(rival, model, session, c);
			}else {
				fallo=false;
				throw new NoResultException();
			}
		} catch(NoResultException nre){
			if(fallo)
				e = new Exception("No existe ese héroe :'(");
			else
				e = new Exception("¡No puedes luchar contra ti mismo!");
			model.addAttribute("falloAmigo", e);
			formSource=lobby(model, session);	
		}
		return formSource;
	}

	@SuppressWarnings("unchecked")
	@Transactional
	@RequestMapping(value = "/combateAleatorio", method = RequestMethod.POST)
	public String combateAleatorio (Model model, HttpSession session) {

		String formSource = "";
		List<Heroe> a = null;
		Heroe rival = null;
		//sacamos una lista de los heroes en la BD. Quitamos el nuestro de la lista.

		try{//Sacamos un id aleatorio de esa lista. Sacamos el heroe con ese id. Lo sacamos con el modelo.
			User yo = (User)session.getAttribute("user");
			a = (List<Heroe>)entityManager.createNamedQuery("todosMenosYo").setParameter("yo", yo.getHeroe().getId()).getResultList();
			long alea;

			if(!a.isEmpty()){	
				alea = (long) Math.floor(Math.random()*(a.size())) + 1;
				rival = (Heroe)entityManager.createNamedQuery("miHeroe").setParameter("idParam", alea).getSingleResult();
				model.addAttribute("rival", rival);
				Combate c= new Combate(yo.getHeroe(), rival);
				formSource=combate(rival, model, session, c);
			}else throw new NoResultException();

		} catch(NoResultException nre){ //hipotetico caso de que solo haya un heroe en la base de datos	
			Exception e = new Exception("No se ha podido encontrar otro héroe :'(");
			model.addAttribute("falloAleatorio", e);
			formSource=lobby(model, session);			
		}

		return formSource;
	}

	@RequestMapping(value = "/cambioAtaqueB", method = RequestMethod.POST)
	public String cambioAtaqueB(@RequestParam("id") long atq, Model model, HttpSession session){
		Ataque a= (Ataque) entityManager.find(Ataque.class, atq);
		CombateBestia c = (CombateBestia) session.getAttribute("combate");
		c.getA().setAtaque(a);
		session.setAttribute("combate", c);
		return arena(c.getB(),model,session,c);
	}

	@RequestMapping(value = "/cambioAtaqueH", method = RequestMethod.POST)
	public String cambioAtaqueH(@RequestParam("id") long atq, Model model, HttpSession session){
		Ataque a= (Ataque) entityManager.find(Ataque.class, atq);
		Combate c = (Combate) session.getAttribute("combate");
		c.getA().setAtaque(a);
		session.setAttribute("combate", c);
		return combate(c.getB().getHeroe(), model, session, c);
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/luchaHeroe", method = RequestMethod.POST)
	public ResponseEntity<String> luchaHeroe(@RequestParam ("at") int at,
			Model model,HttpSession session){

		User u = (User)session.getAttribute("user");
		User us = (User)entityManager.find(User.class, u.getId());

		Combate c=(Combate) session.getAttribute("combate");
		if(c.getA().getHeroe().getEspada()!=null){
			switch(at){
			case 2: c.getA().setAtaque(c.getA().getHeroe().getEspada().getAt2());break;
			case 3: c.getA().setAtaque(c.getA().getHeroe().getEspada().getAt3());break;
			default: c.getA().setAtaque(c.getA().getHeroe().getEspada().getAt1());break;
			}
		}

		c.getB().ataqueAleatorio();

		c.actualizaCombate();
		int rec=0;
		if (c.isGan()) {
			model.addAttribute("ganador", c.getGanador());
			if (c.getGanador().equals("heroe")){
				rec = us.getHeroe().recompensaHeroes(c.getB().getHeroe());
				c.setRecompensa(rec);
				session.setAttribute("user", us);
			}
		}
		session.setAttribute("combate", c);
		Gson g= new Gson();

		return new ResponseEntity<String>(g.toJson(c), HttpStatus.OK);
	}

	@Transactional
	@RequestMapping(value = "/arena", method = RequestMethod.POST)
	public String combateBestia(
			@RequestParam("id") long id,Model model,HttpSession session){
		User u =(User)session.getAttribute("user");
		Heroe h = new Heroe(u.getHeroe());
		Bestia b = (Bestia)entityManager.find(Bestia.class, id);
		CombateBestia c= new CombateBestia(h, b);
		return arena(b,model,session,c);
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/luchar", method = RequestMethod.POST)
	public ResponseEntity<String> luchar(@RequestParam ("at") int at, 
			Model model, HttpSession session){
		User u = (User)session.getAttribute("user");
		User us = (User)entityManager.find(User.class, u.getId());
		CombateBestia c = (CombateBestia)session.getAttribute("combate");
		if(c.getA().getHeroe().getEspada()!=null){
			switch(at){
			case 2: c.getA().setAtaque(c.getA().getHeroe().getEspada().getAt2());break;
			case 3: c.getA().setAtaque(c.getA().getHeroe().getEspada().getAt3());break;
			default: c.getA().setAtaque(c.getA().getHeroe().getEspada().getAt1());break;
			}
		}

		c.actualizaCombate();

		session.setAttribute("combate", c);
		if (c.isGan()) {
			model.addAttribute("ganador",c.getGanador());
			if (c.getGanador().equals("heroe")){
				c.setRecompensa(us.getHeroe().recompensa(c.getB()));
				session.setAttribute("user", us);
			}
		}
		Gson g= new Gson();

		return new ResponseEntity<String>(g.toJson(c), HttpStatus.OK);
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/arcade", method = RequestMethod.GET)
	public String arcade(Model model , HttpSession session) {
		String formSource = "arcade";
		User u = (User)session.getAttribute("user");
		if(u == null) formSource = "login";
		List<Bestia> b = null;
		try{
			b = (List<Bestia>)entityManager.createNamedQuery("bestiasPorNivel").getResultList();
			model.addAttribute("bestias", b);
		} catch(NoResultException nre){}
		return formSource;
	}

	/***************************************************************************/





	/*
	 ********************* FUNCIONES DE LA GESTION *****************************
	 */

	/************************ GESTION DE USUARIOS *********************************/

	@RequestMapping(value = "/gestionUsuarios", method = RequestMethod.GET)
	public String gestionUsuarios(Model model, HttpSession session) {
		String formSource = "gestionUsuarios";
		List<User> u = null;
		if(!isAdmin(session)) formSource = perfil(model,session);
		else {
			try{
				u = (List<User>)entityManager.createNamedQuery("allUsers").getResultList();
				model.addAttribute("users", u);
			} catch(NoResultException nre){}
		}
		return formSource;
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/borrarUsuario", method = RequestMethod.POST)
	public ResponseEntity<String> borrarUsuario(
			@RequestParam("idUsuario") long id,
			Model model,
			HttpSession session) {

		if(!isAdmin(session)) return new ResponseEntity<String>("No eres admin!", HttpStatus.BAD_REQUEST);

		try{
			User i = (User)entityManager.find(User.class, id);
			if (!i.getRole().equals("admin")) entityManager.remove(i.getHeroe());
			entityManager.remove(i);
			entityManager.flush();
		} catch(NoResultException nre){
			nre.printStackTrace();
			return new ResponseEntity<String>("Error", HttpStatus.BAD_REQUEST);
		}

		StringBuilder sb = new StringBuilder("");
		sb.append("{" + "\"Mensaje\": \"" + "Eliminado correctamente." + "\"}");

		return new ResponseEntity<String>(sb + "", HttpStatus.OK);
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/banearUsuario", method = RequestMethod.POST)
	public ResponseEntity<String> banearUsuario(
			@RequestParam("idUsuario") long id,
			Model model, HttpSession session) {

		if(!isAdmin(session)) return new ResponseEntity<String>("No eres admin!", HttpStatus.BAD_REQUEST);
		try{
			User i = (User)entityManager.find(User.class, id);
			if(i.isBanned()) i.setBanned(false);
			else i.setBanned(true);

			StringBuilder sb = new StringBuilder("");
			sb.append("{" + "\"baneado\": \"" + i.isBanned() + "\"}");
			return new ResponseEntity<String>(sb + "", HttpStatus.OK);

		} catch(NoResultException nre){
			nre.printStackTrace();
			return new ResponseEntity<String>("Error", HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value = "/nuevoAdmin", method = RequestMethod.GET)
	public String nuevoAdmin(Model model, HttpSession session) {
		String formSource = "nuevoAdmin";
		if(!isAdmin(session)) formSource = perfil(model,session);
		return formSource;
	}

	@RequestMapping(value = "/crearAdmin", method = RequestMethod.POST)
	@Transactional
	public String crearAdmin(
			@RequestParam("correo") String formLogin,
			@RequestParam("password") String formPass,
			@RequestParam("repassword") String formRePass,
			HttpSession session, Model model) {

		//HABRIA QUE COMPROBAR SI ES ADMIN EL DE LA SESSION?????

		String formSource = "nuevoAdmin";
		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null || formPass.length() < 4) {
			model.addAttribute("registrerError", "Correo y contraseñas: 4 caracteres mínimo");
		} else {
			User user = User.createUser(formLogin, formPass, "admin", null);
			User u = null;
			try{
				u = (User)entityManager.createNamedQuery("userByLogin")
						.setParameter("loginParam", formLogin).getSingleResult();
				if (u != null) {
					model.addAttribute("registrerError", "El administrador ya existe");
				} else {
					if(formPass.equals(formRePass)){
						entityManager.persist(user.getHeroe());
						entityManager.persist(user);	
						formSource = gestionUsuarios(model, session);
					} else {
						model.addAttribute("registrerError", "La contraseña no es la misma en los dos campos");
						formSource = "nuevoAdmin";
					}
				}
			}catch(NoResultException nre){
				if(formPass.equals(formRePass)){
					entityManager.persist(user.getHeroe());
					entityManager.persist(user);				
					formSource = gestionUsuarios(model, session);
				} else {
					model.addAttribute("registrerError", "La contraseña no es la misma en los dos campos");
					formSource = "nuevoAdmin";
				}
			}
		}
		return formSource;
	}

	/*******************************************************************************/


	private void guardarFoto(MultipartFile photo, String carpeta, String id) {
		try{
			byte[] bytes = photo.getBytes();
			BufferedOutputStream stream =
					new BufferedOutputStream(
							new FileOutputStream(ContextInitializer.getFile(carpeta, id)));
			stream.write(bytes);
			stream.close();
		} catch (IOException e) {}
	}


	/**************************** GESTION OBJETOS *********************************/

	@RequestMapping(value = "/gestionObjetos", method = RequestMethod.GET)
	public String gestionObjetos(Model model, HttpSession session) {
		String formSource = "gestionObjetos";
		List<Item> o = null;

		if(!isAdmin(session)) formSource = perfil(model,session);
		else { 
			try {
				o = (List<Item>)entityManager.createNamedQuery("allItems").getResultList();
				model.addAttribute("objetos", o);
			} catch(NoResultException nre){}
		}
		return formSource;
	}

	@RequestMapping(value = "/nuevoObjeto", method = RequestMethod.GET)
	public String nuevoObjeto(Model model, HttpSession session) {
		String formSource = "nuevoObjeto";
		if(!isAdmin(session)) formSource = perfil(model,session);
		return formSource;
	}

	@Transactional
	@RequestMapping(value = "/modificarObjeto", method = RequestMethod.POST)
	public String modificarObjeto(
			@RequestParam("idObjeto") long id,
			Model model,HttpSession session) {

		String formSource;
		if(isAdmin(session)){	
			try{
				Item i = (Item)entityManager.getReference(Item.class, id);//find?
				model.addAttribute("objeto", i);
			} catch(NoResultException nre){}
			formSource = nuevoObjeto(model, session);
		} else {
			formSource = perfil(model, session);
		}
		return formSource;
	}

	@Transactional
	@RequestMapping(value = "/registrarItem", method = RequestMethod.POST)
	public String registrarItem(
			@RequestParam("idObj") String idObj,
			@RequestParam("nombreViejo") String nombreViejo, 
			@RequestParam("nombreObj") String formNombre,
			@RequestParam("nombreAtq1") String nombreAtq1,
			@RequestParam("nombreAtq1") String nombreAtq2,
			@RequestParam("nombreAtq1") String nombreAtq3,
			@RequestParam("tipoObj") TipoItem formTipo,
			@RequestParam("photo") MultipartFile photo,
			Model model, HttpSession session, HttpServletRequest request) {

		String formSource = "nuevoObjeto";
		if(!isAdmin(session)) return formSource;
		//HABRIA QUE COMPROBAR SI EL DE LA SESION ES ADMIN?????????????
		boolean modificando = !idObj.equals("");

		double formVida=0,dano1=0,dano2=0,dano3=0,precision1=0,precision2=0,precision3=0;
		int formNivel, formFuerza=0, formPrecision=0, formDefensa=0, 
				formVelocidad=0, formPrecio=0;

		long velocidad1=0,velocidad2=0,velocidad3=0;

		//Comprobamos que los datos son correctos
		if (formNombre == null || formNombre.length() < 4) {
			model.addAttribute("objetoError", 
					"Debe asignar un nombre con 4 caracteres minimo");
			return formSource; 
		}
		try {
			if(formTipo.equals(TipoItem.ESPADA)){
				dano1 = Double.parseDouble(request.getParameter("danoAtq1"));
				dano2 = Double.parseDouble(request.getParameter("danoAtq2"));
				dano3 = Double.parseDouble(request.getParameter("danoAtq3"));
				precision1 = Double.parseDouble(request.getParameter("precisionAtq1"));
				precision2 = Double.parseDouble(request.getParameter("precisionAtq2"));
				precision3 = Double.parseDouble(request.getParameter("precisionAtq3"));
				velocidad1 = Long.parseLong(request.getParameter("velocidadAtq1"));
				velocidad2 = Long.parseLong(request.getParameter("velocidadAtq2"));
				velocidad3 = Long.parseLong(request.getParameter("velocidadAtq3"));
			}
			formNivel = Integer.parseInt(request.getParameter("nivelObj"));
			formVida = Double.parseDouble(request.getParameter("vidaObj"));
			formFuerza = Integer.parseInt(request.getParameter("fuerzaObj"));
			formPrecision = Integer.parseInt(request.getParameter("precisionObj"));
			formDefensa = Integer.parseInt(request.getParameter("defObj"));
			formVelocidad = Integer.parseInt(request.getParameter("velObj"));
			formPrecio = Integer.parseInt(request.getParameter("precioObj"));

		} catch (NumberFormatException e) {
			model.addAttribute("objetoError", "Error al introducir datos");
			return formSource;
		}

		/* Comprobamos que si estamos modificando y nos han cambiado
		 * el nombre o estamos creando uno nuevo (nombreViejo = null)
		 * no este en uso*/
		if (!nombreViejo.equals(formNombre)) {
			try {
				Item i = (Item)entityManager.createNamedQuery("itemByName")
						.setParameter("nombreParam", formNombre).getSingleResult();
				if (i != null) {
					model.addAttribute("objetoError", "El nombre ya esta en uso");
					return formSource;
				}
			} catch (NoResultException nre) {}
		}

		//No hay errores por tanto volveremos a gestion cuando lo creemos
		formSource = gestionObjetos(model,session);
		if(dano1>100 || dano2>100 || dano3>100 || precision1>100 || precision2>100 || precision3>100){
			model.addAttribute("objetoError", "valores invalidos");
			return formSource;
		}
		Ataque a1 = null;
		Ataque a2 = null;
		Ataque a3 = null;
		if(formTipo.equals(TipoItem.ESPADA))
			try {
				a1 = new Ataque(nombreAtq1,dano1,precision1,velocidad1);
				a2 = new Ataque(nombreAtq2,dano2,precision2,velocidad2);
				a3 = new Ataque(nombreAtq3,dano3,precision3,velocidad3);
				entityManager.persist(a1);
				entityManager.persist(a2);
				entityManager.persist(a3);
			} catch(Exception e){}

		Item item = new Item(formNombre, formVida, formFuerza, formDefensa,
				formVelocidad, formPrecision, formTipo, formPrecio, formNivel,a1,a2,a3);

		if (modificando) {
			//parseamos el string ya que sabemos que es distinto de null
			Long id = Long.parseLong(idObj); 
			Item modificado = entityManager.find(Item.class, id);
			//modificado pasara a tener los valores de item
			modificado.modificar(item);
			if (!photo.isEmpty()) guardarFoto(photo, "objeto", idObj);
		} else {
			entityManager.persist(item);
			entityManager.flush();	
			if (!photo.isEmpty()) guardarFoto(photo, "objeto", Long.toString(item.getId()));
		}

		return "redirect:" + formSource;
	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/borrarObjeto", method = RequestMethod.POST)
	public ResponseEntity<String> borrarObjeto(
			@RequestParam("idObjeto") long id,
			Model model, HttpSession session) {


		if(!isAdmin(session)) return new ResponseEntity<String>("No eres admin!", HttpStatus.BAD_REQUEST);

		try{
			Item i = (Item)entityManager.find(Item.class, id);
			entityManager.remove(i);
			entityManager.flush();
		} catch(NoResultException nre){
			nre.printStackTrace();
			return new ResponseEntity<String>("Error", HttpStatus.BAD_REQUEST);
		}

		StringBuilder sb = new StringBuilder("");
		sb.append("{" + "\"Mensaje\": \"" + "Eliminado correctamente." + "\"}");

		return new ResponseEntity<String>(sb + "", HttpStatus.OK);

	}

	@ResponseBody
	@RequestMapping(value="/objeto/photo", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] objetoPhoto(@RequestParam("id") String id) throws IOException {
		File f = ContextInitializer.getFile("objeto", id);
		InputStream in = null;
		if (f.exists()) {
			in = new BufferedInputStream(new FileInputStream(f));
		} else {
			in = new BufferedInputStream(
					this.getClass().getClassLoader().getResourceAsStream("objeto-desconocido.png"));
		}

		return IOUtils.toByteArray(in);
	}

	/*******************************************************************************/


	/**************************** GESTION DE BESTIAS ******************************/

	@RequestMapping(value = "/gestionBestias", method = RequestMethod.GET)
	public String gestionBestias(Model model , HttpSession session) {
		String formSource = "gestionBestias";

		if(!isAdmin(session)) formSource = perfil(model,session);
		else {
			List<Bestia> b = null;
			try{
				b = (List<Bestia>)entityManager.createNamedQuery("bestiasPorNivel").getResultList();
				model.addAttribute("bestias", b);
			} catch(NoResultException nre){}
		}
		return formSource;
	}

	@RequestMapping(value = "/nuevaBestia", method = RequestMethod.GET)
	public String nuevaBestia(Model model, HttpSession session) {
		String formSource = "nuevaBestia";
		if(!isAdmin(session)) formSource = perfil(model,session);
		return formSource;
	}

	@Transactional
	@RequestMapping(value = "/modificarBestia", method = RequestMethod.POST)
	public String modificarBestia(
			@RequestParam("idBestia") long id,
			Model model,HttpSession session) {

		String formSource;
		if(isAdmin(session)){	
			try{
				Bestia b = (Bestia)entityManager.getReference(Bestia.class, id);
				model.addAttribute("bestia", b);
			} catch(NoResultException nre){}
			formSource = nuevaBestia(model, session);
		} else {
			formSource = perfil(model, session);
		}
		return formSource;
	}

	@Transactional
	@RequestMapping(value = "/registrarBestia", method = RequestMethod.POST)
	public String registrarBestia(
			@RequestParam("idBestia") String idObj,
			@RequestParam("nombreViejo") String nombreViejo,
			@RequestParam("nombreBestia") String formNombre,
			@RequestParam("photo") MultipartFile photo,
			@RequestParam("recompensa") String recNombre,
			Model model, HttpSession session, HttpServletRequest request) {

		String formSource = "nuevaBestia";
		
		User u = (User)session.getAttribute("user");
		if(!isAdmin(session)) return formSource;
		boolean modificando;
		Item i = null;
		double formVida,porcRecom = 0;
		int formNivel, formFuerza, formPrecision, formDefensa,
		formVelocidad, formExp, formOro;

		modificando = !idObj.equals("");
		//Comprobamos que los datos son correctos
		if (formNombre == null || formNombre.length() < 4) {
			model.addAttribute("bestiaError", 
					"Debe asignar un nombre: minimo 4 caracteres");
			return formSource; 
		}

		try {
			formNivel = Integer.parseInt(request.getParameter("nivel"));
			formVida = Double.parseDouble(request.getParameter("vida"));
			porcRecom = Double.parseDouble(request.getParameter("porcRecompensa"));
			formFuerza = Integer.parseInt(request.getParameter("fuerza"));
			formPrecision = Integer.parseInt(request.getParameter("precision"));
			formDefensa = Integer.parseInt(request.getParameter("defensa"));
			formVelocidad = Integer.parseInt(request.getParameter("velocidad"));
			formExp = Integer.parseInt(request.getParameter("exp"));
			formOro = Integer.parseInt(request.getParameter("oro"));
		} catch (NumberFormatException e) {
			model.addAttribute("bestiaError", "Error al introducir datos");
			return formSource;
		}		
		if(porcRecom > 100 || porcRecom < 0){
			model.addAttribute("bestiaError", "porcentaje de recompensa invalido");
			return formSource;
		}
		/* Comprobamos que si estamos modificando y nos han cambiado
		 * el nombre o estamos creando uno nuevo (nombreViejo = null)
		 * no este en uso*/
		
		if (!nombreViejo.equals(formNombre)) {
			try {
				Bestia b = (Bestia)entityManager.createNamedQuery("bestiaByName")
						.setParameter("nombreParam", formNombre).getSingleResult();
				if (b != null) {
					model.addAttribute("bestiaError", "El nombre ya esta en uso");
					return formSource;
				}		
			} catch (NoResultException nre) {}
		}
		try{
			i = (Item)entityManager.createNamedQuery("itemByName")
					.setParameter("nombreParam", recNombre).getSingleResult();
		}catch(NoResultException nre){
			model.addAttribute("bestiaError", "el item introducido no existe");
			return formSource;
		}
		//No hay errores por tanto volveremos a gestion cuando lo creemos
		formSource = gestionBestias(model,session);

		Bestia bestia = new Bestia(formFuerza, formDefensa, formVida, formPrecision,
				formVelocidad, formNivel, formNombre, formExp, formOro,i,porcRecom);

		if (modificando) {
			//parseamos el string ya que sabemos que es distinto de null
			Long id = Long.parseLong(idObj); 
			Bestia modificada = entityManager.find(Bestia.class, id);
			//modificado pasara a tener los valores de item
			modificada.modificar(bestia);
			if (!photo.isEmpty()) guardarFoto(photo, "bestia", idObj);
		} else {
			entityManager.persist(bestia.getAtaque());
			entityManager.persist(bestia);
			entityManager.flush();	
			if (!photo.isEmpty()) guardarFoto(photo, "bestia", Long.toString(bestia.getId()));
		}

		return "redirect:" + formSource;

	}

	@ResponseBody
	@Transactional
	@RequestMapping(value = "/borrarBestia", method = RequestMethod.POST)
	public ResponseEntity<String> borrarBestia(
			@RequestParam("idBestia") long id,
			Model model,HttpSession session) {

		if(!isAdmin(session)) return new ResponseEntity<String>("No eres admin!", HttpStatus.BAD_REQUEST);

		try{
			Bestia i = (Bestia)entityManager.find(Bestia.class, id);
			entityManager.remove(i);
			entityManager.flush();
		} catch(NoResultException nre){
			nre.printStackTrace();
			return new ResponseEntity<String>("Error", HttpStatus.BAD_REQUEST);
		}

		StringBuilder sb = new StringBuilder("");
		sb.append("{" + "\"Mensaje\": \"" + "Eliminado correctamente." + "\"}");

		return new ResponseEntity<String>(sb + "", HttpStatus.OK);
	}

	@ResponseBody
	@RequestMapping(value="/bestia/photo", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] bestiaPhoto(@RequestParam("id") String id) throws IOException {
		File f = ContextInitializer.getFile("bestia", id);
		InputStream in = null;
		if (f.exists()) {
			in = new BufferedInputStream(new FileInputStream(f));
		} else {
			in = new BufferedInputStream(
					this.getClass().getClassLoader().getResourceAsStream("bestia-desconocida.png"));
		}

		return IOUtils.toByteArray(in);
	}

	/*************************************************************/


	/**************************************************************************************************/

	/** 
	 * Returns true if the user is logged in and is an admin
	 */
	static boolean isAdmin(HttpSession session) {
		User u = (User)session.getAttribute("user");
		if (u != null) {
			return u.getRole().equals("admin");
		} else {
			return false;
		}
	}

	/**
	 * Returns an anti-csrf token for a session, and stores it in the session
	 * @param session
	 * @return
	 */
	static String getTokenForSession (HttpSession session) {
		String token=UUID.randomUUID().toString();
		session.setAttribute("csrf_token", token);
		return token;
	}


	/**
	 * Checks the anti-csrf token for a session against a value
	 * @param session
	 * @param token
	 * @return the token
	 */
	static boolean isTokenValid(HttpSession session, String token) {
		Object t=session.getAttribute("csrf_token");
		return (t != null) && t.equals(token);
	}
}
